// t2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <stdlib.h>
#include <vector>

using namespace std;

typedef unsigned char byte;
typedef __int64 int64;

struct row
{
	byte n[14];
};

struct Pair
{
	row r[2];
	char desc[80];
};

vector<row> _sets[14];
vector<Pair> _pairs[14][14];

void usage()
{
	puts("Usage: t2 <a number>");
}

void ASSERT(bool cond)
{
	if (cond)
		return;
	puts("unexpected condition");
	exit(1);
}

void add(byte n[], byte i)
{
	row r;
	memcpy(r.n, n, sizeof(r.n));
	_sets[i].push_back(r);
}

void print(byte n[], byte i)
{
	printf("\t%d", n[0]);
	for (int j = 1; j < i; j++)
		printf("%d", n[j]);
	if (n[j])
		printf("%d", n[j]);
}

void makePairs()
{
	const int mods[] = {8, 11, 17, 20};
	for (int iSumMinusOne = 0; iSumMinusOne < 14; iSumMinusOne++)
	{
		byte n[14];
		memset(&n, 0, sizeof(n));
		int sum = 0;
		for (int i = 0; ;)
		{
			if (n[i] == 6)
			{
				if (i == 0)
					break;
				sum -= n[i];
				n[i] = 0;
				i--;
				continue;
			}
			else
			{
				ASSERT(n[i] < 6);
				n[i]++;
				sum++;
			}
			if (sum < iSumMinusOne + 1)
			{
				if (i < _countof(n) - 1)
					i++;
			}
			else
			{
				ASSERT(sum == iSumMinusOne + 1);
				if (n[0] > 2)
					break;
				if (n[i] <= 2)
				{
					add(n, i);
				}
				if (i == 0)
					break;
				sum -= n[i];
				n[i] = 0;
				i--;
			}
		}
		printf("all combinations with sum %d:\n", iSumMinusOne+1);
		for (int iSet = 0; iSet <= iSumMinusOne; iSet++)
		{
			for (int i1Row = 0; i1Row < _sets[iSet].size(); i1Row++)
			{
				int64 op1 = 0;
				for (int iDigit = 0; iDigit <= iSet; iDigit++)
					op1 = (op1 * 10) + _sets[iSet][i1Row].n[iDigit];
				printf("\t%I64d\n", op1);
			}
		}
		printf("\n");
		for (int iSet = 1; iSet <= iSumMinusOne; iSet++)  // iSet may be replace with iNumDigitsMinusOne
		{
			for (int i1Row = 0; i1Row < _sets[iSet].size(); i1Row++)
			{
				int64 op1 = 0;
				for (int iDigit = 0; iDigit <= iSet; iDigit++)
					op1 = (op1 * 10) + _sets[iSet][i1Row].n[iDigit];
				for (int i2Row = i1Row + 1; i2Row < _sets[iSet].size(); i2Row++)
				{
					int64 op2 = 0;
					for (int iDigit = 0; iDigit <= iSet; iDigit++)
						op2 = (op2 * 10) + _sets[iSet][i2Row].n[iDigit];
					int64 rDiff = op1 - op2, rSum = op1 + op2;
					if (rDiff < 0)
						rDiff = -rDiff;
					int64 modDiff = rDiff % 28, modSum = rSum % 28;
					Pair p = {};
					for (int iMods = 0; iMods < _countof(mods); iMods++)
					{
						if (modDiff == mods[iMods] || modSum == mods[iMods])
						{
							if (modDiff == mods[iMods])
								sprintf(p.desc, "|%I64d-%I64d|=%I64d\t%%28=%I64d", op1, op2, (op1 > op2) ? op1-op2 : op2-op1, modDiff);
							else
								sprintf(p.desc, "%I64d+%I64d=%I64d\t%%28=%I64d", op1, op2, op1+op2, modSum);
							break;
						}
					}
					if (!p.desc[0] && modSum == 0)
						sprintf(p.desc, "%I64d+%I64d=%I64d\t%%28=%I64d", op1, op2, op1+op2, modSum);
					if (!p.desc[0] && modDiff == 0 && rDiff != 0)
						sprintf(p.desc, "|%I64d-%I64d|=%I64d\t%%28=%I64d", op1, op2, (op1 > op2) ? op1-op2 : op2-op1, modDiff);
					if (p.desc[0])
					{
						p.r[0] = _sets[iSet][i1Row];
						p.r[1] = _sets[iSet][i2Row];
						_pairs[iSumMinusOne][iSet].push_back(p);
					}
				}
				if (iSet == 0)
					continue;
				for (i2Row = 0; i2Row < _sets[iSet-1].size(); i2Row++)
				{
					int64 op2 = 0, op3 = _sets[iSet-1][i2Row].n[iSet-1];
					for (int iDigit = 0; iDigit <= iSet-1; iDigit++)
					{
						op2 = (op2 * 10) + _sets[iSet-1][i2Row].n[iDigit];
						op3 = (op3 * 10) + _sets[iSet-1][i2Row].n[iDigit];
					}
					int64 rDiff2 = op1 - op2, rSum2 = op1 + op2;
					int64 rDiff3 = op1 - op3, rSum3 = op1 + op3;
					if (rDiff2 < 0)
						rDiff2 = -rDiff2;
					if (rDiff3 < 0)
						rDiff3 = -rDiff3;
					int64 modDiff2 = rDiff2 % 28, modSum2 = rSum2 % 28;
					int64 modDiff3 = rDiff3 % 28, modSum3 = rSum3 % 28;
					Pair p = {};
					for (int iMods = 0; iMods < _countof(mods); iMods++)
					{
						if (modDiff2 == mods[iMods] || modSum2 == mods[iMods] ||
							modDiff3 == mods[iMods] || modSum3 == mods[iMods])
						{
							if (modDiff2 == mods[iMods])
								sprintf(p.desc, "|%I64d-%I64d|=%I64d\t%%28=%I64d", op1, op2, (op1 > op2) ? op1-op2 : op2-op1, modDiff2);
							else if (modSum2 == mods[iMods])
								sprintf(p.desc, "%I64d+%I64d=%I64d\t%%28=%I64d", op1, op2, op1+op2, modSum2);
							else if (modDiff3 == mods[iMods])
								sprintf(p.desc, "|%I64d-%I64d|=%I64d\t%%28=%I64d", op1, op3, (op1 > op3) ? op1-op3 : op3-op1, modDiff3);
							else
								sprintf(p.desc, "%I64d+%I64d=%I64d\t%%28=%I64d", op1, op3, op1+op3, modSum3);
							break;
						}
					}
					if (!p.desc[0] && modSum2 == 0)
						sprintf(p.desc, "%I64d+%I64d=%I64d\t%%28=%I64d", op1, op2, op1+op2, modSum2);
					if (!p.desc[0] && modSum3 == 0)
						sprintf(p.desc, "%I64d+%I64d=%I64d\t%%28=%I64d", op1, op3, op1+op3, modSum3);
					if (!p.desc[0] && modDiff2 == 0 && rDiff2 != 0)
						sprintf(p.desc, "|%I64d-%I64d|=%I64d\t%%28=%I64d", op1, op2, (op1 > op2) ? op1-op2 : op2-op1, modDiff2);
					if (!p.desc[0] && modDiff3 == 0 && rDiff3 != 0)
						sprintf(p.desc, "|%I64d-%I64d|=%I64d\t%%28=%I64d", op1, op3, (op1 > op3) ? op1-op3 : op3-op1, modDiff3);
					if (p.desc[0])
					{
						p.r[0] = _sets[iSet][i1Row];
						p.r[1] = _sets[iSet-1][i2Row];
						_pairs[iSumMinusOne][iSet].push_back(p);
					}
				}
			}
			printf("digits=%d\n", iSet + 1);
			for (int iRow = 0; iRow < _pairs[iSumMinusOne][iSet].size(); iRow++)
			{
				print(_pairs[iSumMinusOne][iSet][iRow].r[0].n, iSet);
				printf("\t");
				print(_pairs[iSumMinusOne][iSet][iRow].r[1].n, iSet);
				printf("\t%s\n", _pairs[iSumMinusOne][iSet][iRow].desc);
			}
			printf("\n");
		}
		printf("---------------------------------------------------------\n");
		for (iSet = 0; iSet <= iSumMinusOne; iSet++)
			_sets[iSet].clear();
	}
}

int main(int argc, char* argv[])
{
	makePairs();
	return 0;
}

