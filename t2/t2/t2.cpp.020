// t2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <stdlib.h>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <afx.h>

#define output printf
//#define output no_printf

using namespace std;

typedef unsigned char byte;
typedef __int64 int64;

map<int64, byte> _sets[14];
FILE *_fp[28];

void no_printf(const char * /*fmt*/, ...)
{
}

void usage()
{
	puts("Usage: t2 <a number>");
}

void add(byte n[], byte iSet, byte iSumMinusOne)
{
	int64 r = 0;
	for (int i = 0; i <= iSet; i++)
		r = r * 10 + n[i];
	_sets[iSet][r] = iSumMinusOne + 1;
}

void openFiles()
{
	for (int i = 0; i < 28; i++)
	{
		char fn[80];
		sprintf(fn, "sum-%02d.dat", i + 1);
		_fp[i] = fopen(fn, "w");
		if (!_fp[i])
		{
			fprintf(stderr, "fatal: cannot create file %s\n", fn);
			exit(1);
		}
	}
}

void closeFiles()
{
	for (int i = 0; i < 28; i++)
	{
		//fprintf(_fp[i], "---\n");
		fclose(_fp[i]);
	}
}

void addPairs(int64 r1, int64 r2, int sumMinusOne, int major, int minor, bool bSameSet)
{
	try
	{
		fprintf(_fp[sumMinusOne], "%I64d %I64d %d %d %d\n", r1, r2, bSameSet, major, minor);
	}
	catch (std::exception e)
	{
		fprintf(stderr, "exception: %s\n", e.what());
		exit(1);
	}
}

int64 rev(int64 n)
{
	int64 r = 0;
	while (n)
	{
		r = r * 10 + n % 10;
		n /= 10;
	}
	return r;
}

int64 sum(int64 op1, int64 op2)
{
	return op1 + op2;
}

int64 diff(int64 op1, int64 op2)
{
	char buf[80] = {};
	int i = 0;
	while (op1)
	{
		buf[i++] = '0' + abs((op1 % 10) - (op2 % 10));
		op1 /= 10;
		op2 /= 10;
	}
	buf[i] = 0;
	int64 r;
	sscanf(strrev(buf), "%I64d", &r);
	return r;
}

int sumDigits(int64 i)
{
	int r = 0;
	while (i)
	{
		r += i % 10;
		i /= 10;
	}
	return r;
}

bool isMajor(int n)
{
	if (n == 0)
		return false;
	int mod = n % 28;
	const int mods[] = {0, 8, 11, 17, 20};
	for (int i = 0; i < _countof(mods); i++)
		if (mod == mods[i])
			return true;
	return false;
}

bool isMinor(int mod, bool isMod)
{
	const int mods[] = {2, 26, 30, 35, 38, 44, 47, 54};
	int max = isMod ? 2 : _countof(mods);
	for (int i = 0; i < max; i++)
		if (mod == mods[i])
			return true;
	return false;
}

void removeDuplicates(const int64 i_ar[], int i_count, int64 o_ar[], int &o_count)
{
	memcpy(o_ar, i_ar, i_count * sizeof(int64));
	o_count = i_count;
	for (int i = 0; i < o_count; i++)
		for (int j = i + 1; j < o_count;)
			if (o_ar[i] == o_ar[j])
			{
				if (j + 1 < o_count)
					memcpy(o_ar + j, o_ar + j + 1, (o_count - j - 1) * sizeof(int64));
				o_count--;
				o_ar[o_count] = 0;
			}
			else
			{
				j++;
			}
}

void check(int64 op1, int64 op2, int &major, int &minor)
{
	major = minor = 0;
	int i, j;

	// step1
	int64 op[] = { op1, op2, rev(op1), rev(op2) };
	int max = (op[0] == op[2] && op[1] == op[3]) ? 2 : 4;
	int mod[4];
	for (i = 0; i < max; i++)
		mod[i] = op[i] % 28;
	int step1[] = { mod[0] + mod[1], abs(mod[0] - mod[1]), mod[2] + mod[3], abs(mod[2] - mod[3]) };
	for (i = 0; i < max; i++)
		if (isMajor(step1[i]))
			major++;
		else if (isMinor(step1[i], false))
			minor++;

	// step2
	int64 step2[8] = { sum(op[0], op[1]), diff(op[0], op[1]), 0, 0, sum(op[2], op[3]), diff(op[2], op[3]) };
	for (i = 0; i < max; i++)
		step2[i + i/2 * 2 + 2] = rev(step2[i + i/2 * 2]);
	// remove duplicates
	int64 step2_unique[8];
	int max2;
	removeDuplicates(step2, max * 2, step2_unique, max2);
	// ~
	for (i = 0; i < max2; i++)
	{
		if (isMajor(step2_unique[i]))
			major++;
		else if (isMinor(step2_unique[i] % 28, true))
			minor++;
	}

	// step 3
	int64 step3[] = { step2[0], step2[1], step2[4], step2[5] }, step3_unique[4];
	removeDuplicates(step3, max, step3_unique, max2);
	for (i = 0; i < max2; i++)
	{
		int sumD = sumDigits(step3_unique[i]);
		if (isMajor(sumD))
			major++;
		else if (isMinor(sumD % 28, true))
			minor++;
	}

	//printf("%I64d %I64d\t%d,%d\n", op1, op2, major, minor);
}

bool match(int64 r1, int64 r2, int iSet, bool bSameSet, int &major, int &minor)
{
	check(r1, r2, major, minor);
	if (major || minor)
		return true;
	if (!bSameSet)  // not same number of digits
	{
		const int64 powersOfTen[] =
		{
			10,
			100,
			1000,
			10000,
			100000,
			1000000,
			10000000,
			100000000,
			1000000000,
			10000000000,
			100000000000,
			1000000000000,
			10000000000000,
		};
		int64 r3 = r2 + (r2 % 10) * powersOfTen[iSet-1];
		check(r1, r3, major, minor);
		if (major || minor)
			return true;
	}
	return false;
}

void makePairs()
{
	fprintf(stderr, "\ncreating database...\n");
	for (int iSumMinusOne = 0; iSumMinusOne < 14; iSumMinusOne++)
	{
		byte n[14];
		memset(&n, 0, sizeof(n));
		int sum = 0;
		for (int i = 0; ;)
		{
			if (n[i] == 6)
			{
				if (i == 0)
					break;
				sum -= n[i];
				n[i] = 0;
				i--;
				continue;
			}
			else
			{
				ASSERT(n[i] < 6);
				n[i]++;
				sum++;
			}
			if (sum < iSumMinusOne + 1)
			{
				if (i < _countof(n) - 1)
					i++;
			}
			else
			{
				ASSERT(sum == iSumMinusOne + 1);
				if (n[0] > 2)
					break;
				if (n[i] <= 2)
				{
					add(n, i, iSumMinusOne);
				}
				if (i == 0)
					break;
				sum -= n[i];
				n[i] = 0;
				i--;
			}
		}
	}
	int major, minor;
	for (int iSet = 0; iSet < 14; iSet++)  // iSet may be replaced with iNumDigitsMinusOne
	{
		fprintf(stderr, "number of digits=%d\n", iSet + 1);
		for (auto i1Row = _sets[iSet].begin(); i1Row != _sets[iSet].end(); i1Row++)
		{
			for (auto i2Row = next(i1Row); i2Row != _sets[iSet].end(); i2Row++)
				if (match(i1Row->first, i2Row->first, iSet, true, major, minor))
					addPairs(i1Row->first, i2Row->first, i1Row->second + i2Row->second - 1, major, minor, true);
			if (iSet == 0)
				continue;
			for (auto i2Row = _sets[iSet-1].begin(); i2Row != _sets[iSet-1].end(); i2Row++)
				if (match(i1Row->first, i2Row->first, iSet, false, major, minor))
					addPairs(i1Row->first, i2Row->first, i1Row->second + i2Row->second - 1, major, minor, false);
		}
	}
}

void refineDB()
{
	fprintf(stderr, "\nrefining database...\n");
	struct score
	{
		int major, minor;
		bool bSameSet;
	};
	map<string, score> db;
	for (int i = 0; i < 28; i++)
	{
		fprintf(stderr, "sum=%d\n", i+1);
		char fn[80];
		sprintf(fn, "sum-%02d.dat", i + 1);
		FILE *fp = fopen(fn, "r");
		if (!fp)
		{
			fprintf(stderr, "fatal: cannot open input file %s\n", fn);
			exit(1);
		}
		char buf[80];
		string r1, r2, key1, key2;
		int major, minor;
		bool bSameSet;
		while (fgets(buf, sizeof(buf), fp))
		{
			stringstream s(buf);
			s >> r1 >> r2 >> bSameSet >> major >> minor;
			key1 = r1 + " " + r2;
			reverse(r1.begin(), r1.end());
			reverse(r2.begin(), r2.end());
			key2 = r1 + " " + r2;
			db[key1].major += major;
			db[key1].minor += minor;
			db[key1].bSameSet = bSameSet;
			if (key1 != key2)
			{
				db[key2].major += major;
				db[key2].minor += minor;
				db[key2].bSameSet = bSameSet;
			}
		}
		fclose(fp);
		sprintf(fn, "sum-%02d.db", i + 1);
		fp = fopen(fn, "w");
		if (!fp)
		{
			fprintf(stderr, "fatal: cannot open output file %s\n", fn);
			exit(1);
		}
		for (auto it = db.begin(); it != db.end(); it++)
			fprintf(fp, "%s\t%d\t%d,%d\n", it->first.c_str(), it->second.bSameSet, it->second.major, it->second.minor);
		fclose(fp);
		db.clear();
	}
}

void sortDB()
{
	fprintf(stderr, "\nsorting database...\n");
	struct row
	{
		int64 r1, r2;
		bool bSameSet;
		int major, minor;
	};
	struct rowCompare {
		bool operator() (const row& lhs, const row& rhs) const
		{
			if (lhs.major > rhs.major)
				return true;
			if (lhs.major < rhs.major)
				return false;
			if (lhs.minor > rhs.minor)
				return true;
			if (lhs.minor < rhs.minor)
				return false;
			if (lhs.r1 < rhs.r1)
				return true;
			if (lhs.r1 > rhs.r1)
				return false;
			return (lhs.r2 < rhs.r2);
		}
	};
	set<row, rowCompare> db;
	for (int i = 0; i < 28; i++)
	{
		fprintf(stderr, "sum=%d\n", i+1);
		char fn[80];
		sprintf(fn, "sum-%02d.db", i + 1);
		FILE *fp = fopen(fn, "r");
		if (!fp)
		{
			fprintf(stderr, "fatal: cannot open input file %s\n", fn);
			exit(1);
		}
		char buf[80];
		row r;
		while (fgets(buf, sizeof(buf), fp))
		{
			sscanf(buf, "%I64d %I64d %d %d, %d", &r.r1, &r.r2, &r.bSameSet, &r.major, &r.minor);
			db.insert(r);
		}
		fclose(fp);
		sprintf(fn, "sum-%02d-sorted.db", i + 1);
		fp = fopen(fn, "w");
		if (!fp)
		{
			fprintf(stderr, "fatal: cannot open output file %s\n", fn);
			exit(1);
		}
		for (auto it = db.begin(); it != db.end(); it++)
			fprintf(fp, "%I64d %I64d\t%d\t%d,%d\n", it->r1, it->r2, it->bSameSet, it->major, it->minor);
		fclose(fp);
		db.clear();
	}
}

int main(int argc, char* argv[])
{
	openFiles();
	makePairs();
	closeFiles();
	refineDB();
	sortDB();
	//int major, minor;
	//check(2311, 232, major, minor);
	return 0;
}

